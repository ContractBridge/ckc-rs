pub type BinaryCard = u64;

#[allow(dead_code)]
#[rustfmt::skip]
pub trait BC64 {
    //region cards

    const ACE_SPADES:     u64 = 0b1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
    const KING_SPADES:    u64 = 0b0100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
    const QUEEN_SPADES:   u64 = 0b0010_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
    const JACK_SPADES:    u64 = 0b0001_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
    const TEN_SPADES:     u64 = 0b0000_1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
    const NINE_SPADES:    u64 = 0b0000_0100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
    const EIGHT_SPADES:   u64 = 0b0000_0010_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
    const SEVEN_SPADES:   u64 = 0b0000_0001_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
    const SIX_SPADES:     u64 = 0b0000_0000_1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
    const FIVE_SPADES:    u64 = 0b0000_0000_0100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
    const FOUR_SPADES:    u64 = 0b0000_0000_0010_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
    const TREY_SPADES:    u64 = 0b0000_0000_0001_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
    const DEUCE_SPADES:   u64 = 0b0000_0000_0000_1000_0000_0000_0000_0000_0000_0000_0000_0000_0000;
    const ACE_HEARTS:     u64 = 0b0000_0000_0000_0100_0000_0000_0000_0000_0000_0000_0000_0000_0000;
    const KING_HEARTS:    u64 = 0b0000_0000_0000_0010_0000_0000_0000_0000_0000_0000_0000_0000_0000;
    const QUEEN_HEARTS:   u64 = 0b0000_0000_0000_0001_0000_0000_0000_0000_0000_0000_0000_0000_0000;
    const JACK_HEARTS:    u64 = 0b0000_0000_0000_0000_1000_0000_0000_0000_0000_0000_0000_0000_0000;
    const TEN_HEARTS:     u64 = 0b0000_0000_0000_0000_0100_0000_0000_0000_0000_0000_0000_0000_0000;
    const NINE_HEARTS:    u64 = 0b0000_0000_0000_0000_0010_0000_0000_0000_0000_0000_0000_0000_0000;
    const EIGHT_HEARTS:   u64 = 0b0000_0000_0000_0000_0001_0000_0000_0000_0000_0000_0000_0000_0000;
    const SEVEN_HEARTS:   u64 = 0b0000_0000_0000_0000_0000_1000_0000_0000_0000_0000_0000_0000_0000;
    const SIX_HEARTS:     u64 = 0b0000_0000_0000_0000_0000_0100_0000_0000_0000_0000_0000_0000_0000;
    const FIVE_HEARTS:    u64 = 0b0000_0000_0000_0000_0000_0010_0000_0000_0000_0000_0000_0000_0000;
    const FOUR_HEARTS:    u64 = 0b0000_0000_0000_0000_0000_0001_0000_0000_0000_0000_0000_0000_0000;
    const TREY_HEARTS:    u64 = 0b0000_0000_0000_0000_0000_0000_1000_0000_0000_0000_0000_0000_0000;
    const DEUCE_HEARTS:   u64 = 0b0000_0000_0000_0000_0000_0000_0100_0000_0000_0000_0000_0000_0000;
    const ACE_DIAMONDS:   u64 = 0b0000_0000_0000_0000_0000_0000_0010_0000_0000_0000_0000_0000_0000;
    const KING_DIAMONDS:  u64 = 0b0000_0000_0000_0000_0000_0000_0001_0000_0000_0000_0000_0000_0000;
    const QUEEN_DIAMONDS: u64 = 0b0000_0000_0000_0000_0000_0000_0000_1000_0000_0000_0000_0000_0000;
    const JACK_DIAMONDS:  u64 = 0b0000_0000_0000_0000_0000_0000_0000_0100_0000_0000_0000_0000_0000;
    const TEN_DIAMONDS:   u64 = 0b0000_0000_0000_0000_0000_0000_0000_0010_0000_0000_0000_0000_0000;
    const NINE_DIAMONDS:  u64 = 0b0000_0000_0000_0000_0000_0000_0000_0001_0000_0000_0000_0000_0000;
    const EIGHT_DIAMONDS: u64 = 0b0000_0000_0000_0000_0000_0000_0000_0000_1000_0000_0000_0000_0000;
    const SEVEN_DIAMONDS: u64 = 0b0000_0000_0000_0000_0000_0000_0000_0000_0100_0000_0000_0000_0000;
    const SIX_DIAMONDS:   u64 = 0b0000_0000_0000_0000_0000_0000_0000_0000_0010_0000_0000_0000_0000;
    const FIVE_DIAMONDS:  u64 = 0b0000_0000_0000_0000_0000_0000_0000_0000_0001_0000_0000_0000_0000;
    const FOUR_DIAMONDS:  u64 = 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_1000_0000_0000_0000;
    const TREY_DIAMONDS:  u64 = 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0100_0000_0000_0000;
    const DEUCE_DIAMONDS: u64 = 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0010_0000_0000_0000;
    const ACE_CLUBS:      u64 = 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0001_0000_0000_0000;
    const KING_CLUBS:     u64 = 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_1000_0000_0000;
    const QUEEN_CLUBS:    u64 = 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0100_0000_0000;
    const JACK_CLUBS:     u64 = 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0010_0000_0000;
    const TEN_CLUBS:      u64 = 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0001_0000_0000;
    const NINE_CLUBS:     u64 = 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_1000_0000;
    const EIGHT_CLUBS:    u64 = 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0100_0000;
    const SEVEN_CLUBS:    u64 = 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0010_0000;
    const SIX_CLUBS:      u64 = 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0001_0000;
    const FIVE_CLUBS:     u64 = 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_1000;
    const FOUR_CLUBS:     u64 = 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0100;
    const TREY_CLUBS:     u64 = 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0010;
    const DEUCE_CLUBS:    u64 = 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0001;
    const BLANK:          u64 = 0;

    //endregion

    const ACES: u64 = BinaryCard::ACE_SPADES | BinaryCard::ACE_HEARTS | BinaryCard::ACE_DIAMONDS | BinaryCard::ACE_CLUBS;
    const KINGS: u64 = BinaryCard::KING_SPADES | BinaryCard::KING_HEARTS | BinaryCard::KING_DIAMONDS | BinaryCard::KING_CLUBS;
    const QUEENS: u64 = BinaryCard::QUEEN_SPADES | BinaryCard::QUEEN_HEARTS | BinaryCard::QUEEN_DIAMONDS | BinaryCard::QUEEN_CLUBS;


}

impl BC64 for BinaryCard {

}

#[cfg(test)]
#[allow(non_snake_case)]
mod alt__bit_card {
    use super::*;

    #[test]
    fn aces() {
        assert_eq!(BinaryCard::ACE_SPADES, BinaryCard::ACE_SPADES & BinaryCard::ACES);
        assert_eq!(BinaryCard::ACE_HEARTS, BinaryCard::ACE_HEARTS & BinaryCard::ACES);
        assert_eq!(BinaryCard::ACE_DIAMONDS, BinaryCard::ACE_DIAMONDS & BinaryCard::ACES);
        assert_eq!(BinaryCard::ACE_CLUBS, BinaryCard::ACE_CLUBS & BinaryCard::ACES);
        assert_eq!(BinaryCard::BLANK, BinaryCard::KING_DIAMONDS & BinaryCard::ACES);
    }

    #[test]
    fn kings() {
        assert_eq!(BinaryCard::KING_SPADES, BinaryCard::KING_SPADES & BinaryCard::KINGS);
        assert_eq!(BinaryCard::KING_HEARTS, BinaryCard::KING_HEARTS & BinaryCard::KINGS);
        assert_eq!(BinaryCard::KING_DIAMONDS, BinaryCard::KING_DIAMONDS & BinaryCard::KINGS);
        assert_eq!(BinaryCard::KING_CLUBS, BinaryCard::KING_CLUBS & BinaryCard::KINGS);
        assert_eq!(BinaryCard::BLANK, BinaryCard::ACE_DIAMONDS & BinaryCard::KINGS);
    }
}